参考Blog
http://blog.csdn.net/tenfyguo/article/details/8159176

为了使本次会话产生的崩溃产生Core文件，使用如下命令
ulimit  -c unlimited
Core文件默认生成在出错程序崩溃时的工作目录

/proc/sys/kernel/core_pattern 这里是系统如果产生core的配置信息

程序编译时，加-g选项，编译出来的程序可以被GDB调试，同时Core文件也就可以用GDB分析
readelf -h core.17733可以看一下Core文件的基本信息

gdb 打开方法是，gdb 程序名 core文件
l列出出错行，bt列出调用栈
[dongcao@hzling10 scode]$ readelf -h core.17733 
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              CORE (Core file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          64 (bytes into file)
  Start of section headers:          0 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         16
  Size of section headers:           0 (bytes)
  Number of section headers:         0
  Section header string table index: 0
[dongcao@hzling10 scode]$ gdb a.out core.17733  
GNU gdb (GDB) Red Hat Enterprise Linux (7.0.1-23.el5)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/dongcao/scode/a.out...done.
Reading symbols from /lib64/libc.so.6...(no debugging symbols found)...done.
Loaded symbols for /lib64/libc.so.6
Reading symbols from /lib64/ld-linux-x86-64.so.2...(no debugging symbols found)...done.
Loaded symbols for /lib64/ld-linux-x86-64.so.2
Core was generated by `./a.out'.
Program terminated with signal 11, Segmentation fault.
#0  0x00000000004004ac in fault () at b.c:6
6               *p =100;
(gdb) l                                 ------列出源代码
1       #include <stdio.h>
2
3       void fault()
4       {
5               int *p = NULL;
6               *p =100;
7               printf("%d", *p);
8       }
9
10      void func1()
(gdb) bt                        ----------调用栈
#0  0x00000000004004ac in fault () at b.c:6
#1  0x00000000004004f0 in func1 () at b.c:13
#2  0x0000000000400519 in func2 () at b.c:19
#3  0x0000000000400529 in main () at b.c:24
(gdb)








root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >cd ..
root@fspj-1b:/tmp/node_0x124a/opt >ls
CCS  apps  lib  rthwapi
root@fspj-1b:/tmp/node_0x124a/opt >cd ..
root@fspj-1b:/tmp/node_0x124a >ls
etc  lxc.cfg  opt  tmp  usr
root@fspj-1b:/tmp/node_0x124a >cd ..
root@fspj-1b:/tmp >ls
CCSEarlyConfig.xml  hwr_inet.xml  hwr_service.xml  hwr_syscom.xml  node_0x124a  partrt_env  postresults  ruemlog  startup_DEFAULT.log  tmpTimezoneFile.txt
root@fspj-1b:/tmp >ll
total 892
drwxrwxrwt  9 root root    340 Jan  1 00:11 .
drwxrwxrwt 18 root root    500 Jan  1 00:00 ..
drwxrwxrwt  2 root root     40 Jan  1 00:00 .ICE-unix
drwxrwxrwt  2 root root     40 Jan  1 00:00 .Test-unix
drwxrwxrwt  2 root root     40 Jan  1 00:00 .X11-unix
drwxrwxrwt  2 root root     40 Jan  1 00:00 .XIM-unix
drwxrwxrwt  2 root root     40 Jan  1 00:00 .font-unix
-rwx------  1 root root   2968 Jan  1 00:00 CCSEarlyConfig.xml
-rwx------  1 root root  16902 Jan  1 00:00 hwr_inet.xml
-rwx------  1 root root  12676 Jan  1 00:00 hwr_service.xml
-rwx------  1 root root   1555 Jan  1 00:00 hwr_syscom.xml
drwxr-xr-x  6 root root    140 Jan  1 00:00 node_0x124a
-rw-r--r--  1 root root    242 Jan  1 00:00 partrt_env
drwxr-xr-x  2 root root     60 Jan  1 00:00 postresults
prw-r--r--  1 root root      0 Jan  1 00:19 ruemlog
-rw-r--r--  1 root root 856209 Jan  1 00:19 startup_DEFAULT.log
-rw-r--r--  1 root root     89 Jan  1 00:11 tmpTimezoneFile.txt
root@fspj-1b:/tmp >cd .
root@fspj-1b:/tmp >pwd
/tmp
root@fspj-1b:/tmp >cd /tmp/
.ICE-unix/           .X11-unix/           .font-unix/          hwr_inet.xml         hwr_syscom.xml       partrt_env           ruemlog              tmpTimezoneFile.txt  
.Test-unix/          .XIM-unix/           CCSEarlyConfig.xml   hwr_service.xml      node_0x124a/         postresults/         startup_DEFAULT.log  
root@fspj-1b:/tmp >cd /tmp/node_0x124a/
etc/     lxc.cfg  opt/     tmp/     usr/     
root@fspj-1b:/tmp >cd /tmp/node_0x124a/tmp/
root@fspj-1b:/tmp/node_0x124a/tmp >cp 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core ../opt/  
CCS/     apps/    lib/     rthwapi/ 
root@fspj-1b:/tmp/node_0x124a/tmp >cp 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core ../opt/apps/
HSDPA_EXE      HSDPA_EXE_SJM  hsupal2Master  lom            startupapp.sh  
root@fspj-1b:/tmp/node_0x124a/tmp >cp 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core ../opt/apps/
root@fspj-1b:/tmp/node_0x124a/tmp >cd ../opt/apps/
root@fspj-1b:/tmp/node_0x124a/opt/apps >ls
0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core  HSDPA_EXE  HSDPA_EXE_SJM  hsupal2Master  lom  startupapp.sh
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >ll
total 7228
drwxr-xr-x 2 61467146  300      160 Jan  1 00:19 .
drwxr-xr-x 6 61467146  300      120 Jan  1 00:00 ..
-rw------- 1 root     root 41943040 Jan  1 00:19 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core
-rwxr-xr-x 1 61467146  300   308796 Nov  9  2016 HSDPA_EXE
-rwxr-xr-x 1 61467146  300   281120 Nov  9  2016 HSDPA_EXE_SJM
-rwxr-xr-x 1 61467146  300  1477644 Nov  9  2016 hsupal2Master
-rwxr-xr-x 1 61467146  300   276080 Nov  9  2016 lom
-rwxr-xr-x 1 61467146  300      724 Nov  9  2016 startupapp.sh
root@fspj-1b:/tmp/node_0x124a/opt/apps >gdb HSDPA_EXE_SJM 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core 
GNU gdb (GDB) 7.11.1.20160722-git
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-cortexa15-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from HSDPA_EXE_SJM...done.
Illegal process-id: 0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core.
BFD: Warning: /tmp/node_0x124a/opt/apps/0x124a_HSDPA_EXE_SJM_2809_11_1072915872.core is truncated: expected core file size >= 69074944, found: 41943040.

warning: exec file is newer than core file.
[New LWP 305]
[New LWP 330]
[New LWP 184]
[New LWP 197]
[New LWP 194]
[New LWP 215]
[New LWP 212]
[New LWP 204]
[New LWP 201]
[New LWP 192]
[New LWP 189]
[New LWP 185]
Cannot access memory at address 0xb6ffd944
Cannot access memory at address 0xb6ffd940
Core was generated by `/opt/apps/HSDPA_EXE_SJM'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0xb68de060 in ?? ()
[Current thread is 1 (LWP 305)]
(gdb) bt
#0  0xb68de060 in ?? ()
#1  0xb68de03a in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) 
#0  0xb68de060 in ?? ()
#1  0xb68de03a in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) 
#0  0xb68de060 in ?? ()
#1  0xb68de03a in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) 
#0  0xb68de060 in ?? ()
#1  0xb68de03a in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) 
#0  0xb68de060 in ?? ()
#1  0xb68de03a in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) q
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >
root@fspj-1b:/tmp/node_0x124a/opt/apps >cd ..
root@fspj-1b:/tmp/node_0x124a/opt >ls
CCS  apps  lib  rthwapi
root@fspj-1b:/tmp/node_0x124a/opt >cd ..
root@fspj-1b:/tmp/node_0x124a >ls   
etc  lxc.cfg  opt  tmp  usr
root@fspj-1b:/tmp/node_0x124a >cd opt/CCS/               
root@fspj-1b:/tmp/node_0x124a/opt/CCS >ls
A                           CCSDaemonExe                 EmTraceController.optdebug  ccs.ratstop         em_bm_test_launcher        killpids.sh                    scmeas             version
AppDef.txt                  CCSDaemonExe.optdebug        ccs.appstart                collect-minilog.sh  em_perf_monitor            libAaMemOsWrapper.so.optdebug  sender
B                           CCSEmDispatcherExe           ccs.appstop                 crashHandler.sh     evaluateRadParam           libCCS.so.optdebug             syscom-echo
C                           CCSEmDispatcherExe.optdebug  ccs.logcollection           dumpqueue           evaluateRadParam.optdebug  nbMemDumpPhyAddrK2             syscom-keep-alive
CCSApplicationExe           D                            ccs.ratkill                 dumpregions         get_pending_desc           nbMemTracker                   syscom-ping
CCSApplicationExe.optdebug  EmTraceController            ccs.ratstart                em-sender           k2_memdump                 printQueue                     syscom-ping-burst
root@fspj-1b:/tmp/node_0x124a/opt/CCS >ll
total 17840
drwxr-xr-x 6 root     root      900 Sep 30  2016 .
drwxr-xr-x 6 61467146  300      120 Jan  1 00:00 ..
drwxr-xr-x 2 root     root       80 Sep 30  2016 A
-rw-r--r-- 1 root     root      528 Sep 30  2016 AppDef.txt
drwxr-xr-x 2 root     root       80 Sep 30  2016 B
drwxr-xr-x 2 root     root       80 Sep 30  2016 C
-rwxr-xr-x 1 root     root     8836 Sep 30  2016 CCSApplicationExe
-rwxr-xr-x 1 root     root   140656 Sep 30  2016 CCSApplicationExe.optdebug
-rwxr-xr-x 1 root     root    59904 Sep 30  2016 CCSDaemonExe
-rwxr-xr-x 1 root     root   745892 Sep 30  2016 CCSDaemonExe.optdebug
-rwxr-xr-x 1 root     root    89028 Sep 30  2016 CCSEmDispatcherExe
-rwxr-xr-x 1 root     root    25244 Sep 30  2016 CCSEmDispatcherExe.optdebug
drwxr-xr-x 2 root     root       80 Sep 30  2016 D
-rwxr-xr-x 1 root     root   384780 Sep 30  2016 EmTraceController
-rwxr-xr-x 1 root     root   375460 Sep 30  2016 EmTraceController.optdebug
-rwxr-xr-x 1 root     root     6653 Sep 30  2016 ccs.appstart
-rwxr-xr-x 1 root     root     1737 Sep 30  2016 ccs.appstop
-rwxr-xr-x 1 root     root     4602 Sep 30  2016 ccs.logcollection
-rwxr-xr-x 1 root     root     1175 Sep 30  2016 ccs.ratkill
-rwxr-xr-x 1 root     root     7970 Sep 30  2016 ccs.ratstart
-rwxr-xr-x 1 root     root      991 Sep 30  2016 ccs.ratstop
-rwxr-xr-x 1 root     root      777 Sep 30  2016 collect-minilog.sh
-rwxr-xr-x 1 root     root     3698 Sep 30  2016 crashHandler.sh
-rwxr-xr-x 1 root     root   153432 Sep 30  2016 dumpqueue
-rwxr-xr-x 1 root     root   130784 Sep 30  2016 dumpregions
-rwxr-xr-x 1 root     root   332544 Sep 30  2016 em-sender
-rwxr-xr-x 1 root     root   350796 Sep 30  2016 em_bm_test_launcher
-rwxr-xr-x 1 root     root   375060 Sep 30  2016 em_perf_monitor
-rwxr-xr-x 1 root     root     4996 Sep 30  2016 evaluateRadParam
-rwxr-xr-x 1 root     root    56488 Sep 30  2016 evaluateRadParam.optdebug
-rwxr-xr-x 1 root     root    12762 Sep 30  2016 get_pending_desc
-rwxr-xr-x 1 root     root    12461 Sep 30  2016 k2_memdump
-rwxr-xr-x 1 root     root      339 Sep 30  2016 killpids.sh
-rwxr-xr-x 1 root     root    77988 Sep 30  2016 libAaMemOsWrapper.so.optdebug
-rwxr-xr-x 1 root     root 12602668 Sep 30  2016 libCCS.so.optdebug
-rwxr-xr-x 1 root     root   353116 Sep 30  2016 nbMemDumpPhyAddrK2
-rwxr-xr-x 1 root     root   111924 Sep 30  2016 nbMemTracker
-rwxr-xr-x 1 root     root     1502 Sep 30  2016 printQueue
-rwxr-xr-x 1 root     root   155520 Sep 30  2016 scmeas
-rwxr-xr-x 1 root     root   409020 Sep 30  2016 sender
-rwxr-xr-x 1 root     root    93800 Sep 30  2016 syscom-echo
-rwxr-xr-x 1 root     root   364512 Sep 30  2016 syscom-keep-alive
-rwxr-xr-x 1 root     root   360000 Sep 30  2016 syscom-ping
-rwxr-xr-x 1 root     root   366040 Sep 30  2016 syscom-ping-burst
-rw-r--r-- 1 root     root       90 Sep 30  2016 version
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat crashHandler.sh 
#!/bin/bash
##########################################################################
# core_pattern
# |/opt/CCS/crashHandler.FSMr4.sh <NodeID> %e %p %s %t %c <CoreSize>
#-------------------------------------------------------------------------
# Input parameters:
readonly NODEID=$1                  # <NodeID>      NodeID on which the crash occured
PROCNAMETEMP=`cat /proc/$3/comm`
readonly PROCNAME=$PROCNAMETEMP     # %e            Executable filename is taken from /proc/$PID/comm
readonly PID=$3                     # %p            PID of dumped process, as seen in the PID namespace in which the process resides
readonly SIGNALNO=$4                # %s            number of signal causing dump
readonly TIME=$5                    # %t            time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
readonly SOFTLIMIT=$6               # %c            core file size soft resource limit of crashing process (since Linux 2.6.24)
readonly CORESIZE=$7                # <CoreSize>    Maximum size of the compressed core file

#
# Truncate Variables to specified length:
readonly PROCNAME_TRUNC="$(echo -e "${PROCNAME}" | tr -d '[[:space:]]' | cut -c -16)"
readonly PID_TRUNC="$(echo -e "${PID}" | cut -c -5)"
readonly SIGNALNO_TRUNC="$(echo -e "${SIGNALNO}" | cut -c -3)"

#
# Path and Filename:
readonly COREPATH=/var/tmp/node_$NODEID
readonly CRASHINFO="${NODEID}_${PROCNAME_TRUNC}_${PID_TRUNC}_${SIGNALNO_TRUNC}_${TIME}"
readonly COREFILE=$COREPATH/${CRASHINFO}.core.xz
readonly BTCOREINFO=$COREPATH/bt-coreinfo.txt
#
# Binary paths
readonly CRASHHANDLER=/usr/bin/crashHandler
readonly CORENOTIFIER=/opt/CCS/coreNotifier
#
# Lockfile setting
readonly LOCKPATH=$COREPATH
readonly SCRIPTNAME=$(basename "$0")
readonly LOCK_FD=200
#
# Truncation maximum file size
readonly MAX_BTCOREINFO_SIZE=1048576 # 1MB
#
# Debug settings
DEBUGLOG=/var/tmp/node_$NODEID/crashHandler.log
##########################################################################

coreExists() {
#http://unix.stackexchange.com/a/79303
    [ -e $1 ] ;
}

coreEnabled() {
    if [ "$SOFTLIMIT" == "0" ]; then
        CORESIZE=0
    fi

    if [ "$CORESIZE" == "0" ]; then
        COREFILE=/dev/null
        ISCORE=0
    else
        ISCORE=1
    fi
}

truncate() {
    if [ -e "$BTCOREINFO" ]; then
        BTCOREINFO_SIZE=$(wc -c "$BTCOREINFO" | awk '{ print $1 }')

        if [ "$BTCOREINFO_SIZE" -gt "$MAX_BTCOREINFO_SIZE" ]; then
            dd if=/dev/null of="$BTCOREINFO" seek="$MAX_BTCOREINFO_SIZE" bs=1 count=1
        fi
    fi
}

coreDumping() {
    if [ "$PROCNAME" != "bash" ]; then
        ${CRASHHANDLER} -dk -s $CORESIZE -E none -o "$COREFILE" -l "$BTCOREINFO" "$PROCNAME"
    fi
}

lock() {
    lock_file=$COREPATH/.$SCRIPTNAME.lock

    eval "exec $LOCK_FD>$lock_file"

    flock -n $LOCK_FD \
        && return 0 \
        || return 1
}

notify() {
    echo "${CORENOTIFIER} -m $1 -e $PROCNAME -p $PID -s $SIGNALNO -t $TIME -d $COREPATH -x $ISCORE" >> $DEBUGLOG
    ${CORENOTIFIER} -m $1 -e $PROCNAME -p $PID -s $SIGNALNO -t $TIME -d $COREPATH -x $ISCORE
}

#main function
main() {
    #lock || exit 1
    umask 0037
    if [ "$PROCNAME" != "bash" ]; then
        echo "OWNPID=$$ starting core script NODEID=$NODEID PROCNAME=$PROCNAME SIGNALNO=$SIGNALNO TIME=$TIME SOFTLIMIT=$SOFTLIMIT CORESIZE=$CORESIZE COREPATH=$COREPATH" >> $DEBUGLOG
    fi
    if ( ! coreExists "${COREPATH}/*.core.xz.p7"); then
        #coreEnabled
        #notify "STARTED" & #detach notification to start coreDumping immediately
        coreDumping
        truncate
    else
        echo "OWNPID=$$ core file exists" >> $DEBUGLOG
    fi;
    #notify "COMPLETED"
    #rm $lock_file
}
# entry point
main
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys
sys/           sysrq-trigger  sysvipc/       
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/     
auto_msgmni                 domainname                  msgmax                      panic_on_oops               printk_delay                sched_rt_period_us          threads-max
blk_iopoll                  ftrace_dump_on_oops         msgmnb                      perf_cpu_time_max_percent   printk_ratelimit            sched_rt_runtime_us         traceoff_on_warning
cad_pid                     hostname                    msgmni                      perf_event_max_sample_rate  printk_ratelimit_burst      sem                         usermodehelper/
cap_last_cap                hotplug                     ngroups_max                 perf_event_mlock_kb         pty/                        shm_rmid_forced             version
core_pattern                keys/                       osrelease                   perf_event_paranoid         random/                     shmall                      
core_pipe_limit             kptr_restrict               ostype                      pid_max                     randomize_va_space          shmmax                      
core_uses_pid               max_lock_depth              overflowgid                 poweroff_cmd                real-root-dev               shmmni                      
ctrl-alt-del                modprobe                    overflowuid                 print-fatal-signals         sched_child_runs_first      sysrq                       
dmesg_restrict              modules_disabled            panic                       printk                      sched_rr_timeslice_ms       tainted                     
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/core_
core_pattern     core_pipe_limit  core_uses_pid    
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/core_p
core_pattern     core_pipe_limit  
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/core_pattern 
|/opt/CCS/coreDispatcher.sh 124d %E %P %s %t %c %h 15 /var/tmp/1/B/dumps
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cd /opt/CCS/
root@fspj-1b:/opt/CCS >cat coreDispatcher.sh 
#!/bin/bash
##########################################################################
# core_pattern
# |/opt/CCS/coreDispatcher.sh <NodeID> %e %P %s %t %c %h <CoreSize> <CorePath>
# crashHandler is a common name for CCS and RT and the name should not be changed
# crashHandler is called in following parameters:
# crashHandler <NodeID> %e %P %s %t %c <CoreSize> <CorePath>
#-------------------------------------------------------------------------
# Input parameters:
readonly NODEID=$1                 # <NodeID>      NodeID on which the crash occured
readonly PROCPATH=$2               # %E            pathname of executable, with slashes ('/') replaced by exclamation marks ('!')
readonly PID=$3                    # %P            PID of dumped process, as seen in the initial PID namespace (since Linux 3.12)
readonly SIGNALNO=$4               # %s            number of signal causing dump
readonly TIME=$5                   # %t            time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
readonly SOFTLIMIT=$6              # %c            core file size soft resource limit of crashing process (since Linux 2.6.24)
readonly HOSTNAME=$7               # %h            hostname (for virtual nodes host name indictes virtual nodeId)
readonly CORESIZE=$8               # <CoreSize>    Maximum size of the compressed core file
readonly COREPATH=$9               # <CorePath>    Path where the corefile and bt-coreinfo will be stored
# Binary paths
readonly CRASHHANDLER=/opt/CCS/crashHandler.sh
readonly LXC_SYSROOT_PATH=/tmp/node_${HOSTNAME}
readonly LXC_CRASHHANDLER="${LXC_SYSROOT_PATH}/${CRASHHANDLER}"

#Process name:
readonly PROCNAME="$(basename $(echo "${PROCPATH}" | tr '!' '/'))"

# Debug settings
# DEBUGLOG=/tmp/$(basename "$0").log
#
##########################################################################
main(){
    #    START_TIME=$(date +%s.%N)
    # echo "OWNPID=$$ starting core dispatcher">>$DEBUGLOG
    # echo "NODEID=$NODEID PROCNAME=$PROCNAME SIGNALNO=$SIGNALNO TIME=$TIME SOFTLIMIT=$SOFTLIMIT">>$DEBUGLOG
    # echo "CORESIZE=$CORESIZE COREPATH=$COREPATH HOSTNAME=$HOSTNAME LOCAL_PID=$LOCAL_PID HOST_PID=$HOST_PID ">>$DEBUGLOG
    if [ -e $LXC_CRASHHANDLER ] ; then
            # echo "LXC_CRASHHANDLER Path = $LXC_CRASHHANDLER">>$DEBUGLOG
            $LXC_CRASHHANDLER $HOSTNAME $PROCNAME $PID $SIGNALNO $TIME $SOFTLIMIT $CORESIZE $COREPATH
    else
            # echo "PLATFORM_CRASHHANDLER Path = $CRASHHANDLER">>$DEBUGLOG
            $CRASHHANDLER $NODEID $PROCNAME $PID $SIGNALNO $TIME $SOFTLIMIT $CORESIZE $COREPATH
    fi;
#    END_TIME=$(date +%s.%N)
#    DIFF_TIME=$(echo "$END_TIME - $START_TIME" | bc)
#    echo "core dumping took $DIFF_TIME seconds " >> $DEBUGLOG
 }

# entry point
main

root@fspj-1b:/opt/CCS >cd /tmp/node_0x124a/opt/CCS/
root@fspj-1b:/tmp/node_0x124a/opt/CCS >ls
A                           CCSDaemonExe                 EmTraceController.optdebug  ccs.ratstop         em_bm_test_launcher        killpids.sh                    scmeas             version
AppDef.txt                  CCSDaemonExe.optdebug        ccs.appstart                collect-minilog.sh  em_perf_monitor            libAaMemOsWrapper.so.optdebug  sender
B                           CCSEmDispatcherExe           ccs.appstop                 crashHandler.sh     evaluateRadParam           libCCS.so.optdebug             syscom-echo
C                           CCSEmDispatcherExe.optdebug  ccs.logcollection           dumpqueue           evaluateRadParam.optdebug  nbMemDumpPhyAddrK2             syscom-keep-alive
CCSApplicationExe           D                            ccs.ratkill                 dumpregions         get_pending_desc           nbMemTracker                   syscom-ping
CCSApplicationExe.optdebug  EmTraceController            ccs.ratstart                em-sender           k2_memdump                 printQueue                     syscom-ping-burst
root@fspj-1b:/tmp/node_0x124a/opt/CCS >ll
total 17840
drwxr-xr-x 6 root     root      900 Sep 30  2016 .
drwxr-xr-x 6 61467146  300      120 Jan  1 00:00 ..
drwxr-xr-x 2 root     root       80 Sep 30  2016 A
-rw-r--r-- 1 root     root      528 Sep 30  2016 AppDef.txt
drwxr-xr-x 2 root     root       80 Sep 30  2016 B
drwxr-xr-x 2 root     root       80 Sep 30  2016 C
-rwxr-xr-x 1 root     root     8836 Sep 30  2016 CCSApplicationExe
-rwxr-xr-x 1 root     root   140656 Sep 30  2016 CCSApplicationExe.optdebug
-rwxr-xr-x 1 root     root    59904 Sep 30  2016 CCSDaemonExe
-rwxr-xr-x 1 root     root   745892 Sep 30  2016 CCSDaemonExe.optdebug
-rwxr-xr-x 1 root     root    89028 Sep 30  2016 CCSEmDispatcherExe
-rwxr-xr-x 1 root     root    25244 Sep 30  2016 CCSEmDispatcherExe.optdebug
drwxr-xr-x 2 root     root       80 Sep 30  2016 D
-rwxr-xr-x 1 root     root   384780 Sep 30  2016 EmTraceController
-rwxr-xr-x 1 root     root   375460 Sep 30  2016 EmTraceController.optdebug
-rwxr-xr-x 1 root     root     6653 Sep 30  2016 ccs.appstart
-rwxr-xr-x 1 root     root     1737 Sep 30  2016 ccs.appstop
-rwxr-xr-x 1 root     root     4602 Sep 30  2016 ccs.logcollection
-rwxr-xr-x 1 root     root     1175 Sep 30  2016 ccs.ratkill
-rwxr-xr-x 1 root     root     7970 Sep 30  2016 ccs.ratstart
-rwxr-xr-x 1 root     root      991 Sep 30  2016 ccs.ratstop
-rwxr-xr-x 1 root     root      777 Sep 30  2016 collect-minilog.sh
-rwxr-xr-x 1 root     root     3698 Sep 30  2016 crashHandler.sh
-rwxr-xr-x 1 root     root   153432 Sep 30  2016 dumpqueue
-rwxr-xr-x 1 root     root   130784 Sep 30  2016 dumpregions
-rwxr-xr-x 1 root     root   332544 Sep 30  2016 em-sender
-rwxr-xr-x 1 root     root   350796 Sep 30  2016 em_bm_test_launcher
-rwxr-xr-x 1 root     root   375060 Sep 30  2016 em_perf_monitor
-rwxr-xr-x 1 root     root     4996 Sep 30  2016 evaluateRadParam
-rwxr-xr-x 1 root     root    56488 Sep 30  2016 evaluateRadParam.optdebug
-rwxr-xr-x 1 root     root    12762 Sep 30  2016 get_pending_desc
-rwxr-xr-x 1 root     root    12461 Sep 30  2016 k2_memdump
-rwxr-xr-x 1 root     root      339 Sep 30  2016 killpids.sh
-rwxr-xr-x 1 root     root    77988 Sep 30  2016 libAaMemOsWrapper.so.optdebug
-rwxr-xr-x 1 root     root 12602668 Sep 30  2016 libCCS.so.optdebug
-rwxr-xr-x 1 root     root   353116 Sep 30  2016 nbMemDumpPhyAddrK2
-rwxr-xr-x 1 root     root   111924 Sep 30  2016 nbMemTracker
-rwxr-xr-x 1 root     root     1502 Sep 30  2016 printQueue
-rwxr-xr-x 1 root     root   155520 Sep 30  2016 scmeas
-rwxr-xr-x 1 root     root   409020 Sep 30  2016 sender
-rwxr-xr-x 1 root     root    93800 Sep 30  2016 syscom-echo
-rwxr-xr-x 1 root     root   364512 Sep 30  2016 syscom-keep-alive
-rwxr-xr-x 1 root     root   360000 Sep 30  2016 syscom-ping
-rwxr-xr-x 1 root     root   366040 Sep 30  2016 syscom-ping-burst
-rw-r--r-- 1 root     root       90 Sep 30  2016 version
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat crashHandler.sh 
#!/bin/bash
##########################################################################
# core_pattern
# |/opt/CCS/crashHandler.FSMr4.sh <NodeID> %e %p %s %t %c <CoreSize>
#-------------------------------------------------------------------------
# Input parameters:
readonly NODEID=$1                  # <NodeID>      NodeID on which the crash occured
PROCNAMETEMP=`cat /proc/$3/comm`
readonly PROCNAME=$PROCNAMETEMP     # %e            Executable filename is taken from /proc/$PID/comm
readonly PID=$3                     # %p            PID of dumped process, as seen in the PID namespace in which the process resides
readonly SIGNALNO=$4                # %s            number of signal causing dump
readonly TIME=$5                    # %t            time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
readonly SOFTLIMIT=$6               # %c            core file size soft resource limit of crashing process (since Linux 2.6.24)
readonly CORESIZE=$7                # <CoreSize>    Maximum size of the compressed core file

#
# Truncate Variables to specified length:
readonly PROCNAME_TRUNC="$(echo -e "${PROCNAME}" | tr -d '[[:space:]]' | cut -c -16)"
readonly PID_TRUNC="$(echo -e "${PID}" | cut -c -5)"
readonly SIGNALNO_TRUNC="$(echo -e "${SIGNALNO}" | cut -c -3)"

#
# Path and Filename:
readonly COREPATH=/var/tmp/node_$NODEID
readonly CRASHINFO="${NODEID}_${PROCNAME_TRUNC}_${PID_TRUNC}_${SIGNALNO_TRUNC}_${TIME}"
readonly COREFILE=$COREPATH/${CRASHINFO}.core.xz
readonly BTCOREINFO=$COREPATH/bt-coreinfo.txt
#
# Binary paths
readonly CRASHHANDLER=/usr/bin/crashHandler
readonly CORENOTIFIER=/opt/CCS/coreNotifier
#
# Lockfile setting
readonly LOCKPATH=$COREPATH
readonly SCRIPTNAME=$(basename "$0")
readonly LOCK_FD=200
#
# Truncation maximum file size
readonly MAX_BTCOREINFO_SIZE=1048576 # 1MB
#
# Debug settings
DEBUGLOG=/var/tmp/node_$NODEID/crashHandler.log
##########################################################################

coreExists() {
#http://unix.stackexchange.com/a/79303
    [ -e $1 ] ;
}

coreEnabled() {
    if [ "$SOFTLIMIT" == "0" ]; then
        CORESIZE=0
    fi

    if [ "$CORESIZE" == "0" ]; then
        COREFILE=/dev/null
        ISCORE=0
    else
        ISCORE=1
    fi
}

truncate() {
    if [ -e "$BTCOREINFO" ]; then
        BTCOREINFO_SIZE=$(wc -c "$BTCOREINFO" | awk '{ print $1 }')

        if [ "$BTCOREINFO_SIZE" -gt "$MAX_BTCOREINFO_SIZE" ]; then
            dd if=/dev/null of="$BTCOREINFO" seek="$MAX_BTCOREINFO_SIZE" bs=1 count=1
        fi
    fi
}

coreDumping() {
    if [ "$PROCNAME" != "bash" ]; then
        ${CRASHHANDLER} -dk -s $CORESIZE -E none -o "$COREFILE" -l "$BTCOREINFO" "$PROCNAME"
    fi
}

lock() {
    lock_file=$COREPATH/.$SCRIPTNAME.lock

    eval "exec $LOCK_FD>$lock_file"

    flock -n $LOCK_FD \
        && return 0 \
        || return 1
}

notify() {
    echo "${CORENOTIFIER} -m $1 -e $PROCNAME -p $PID -s $SIGNALNO -t $TIME -d $COREPATH -x $ISCORE" >> $DEBUGLOG
    ${CORENOTIFIER} -m $1 -e $PROCNAME -p $PID -s $SIGNALNO -t $TIME -d $COREPATH -x $ISCORE
}

#main function
main() {
    #lock || exit 1
    umask 0037
    if [ "$PROCNAME" != "bash" ]; then
        echo "OWNPID=$$ starting core script NODEID=$NODEID PROCNAME=$PROCNAME SIGNALNO=$SIGNALNO TIME=$TIME SOFTLIMIT=$SOFTLIMIT CORESIZE=$CORESIZE COREPATH=$COREPATH" >> $DEBUGLOG
    fi
    if ( ! coreExists "${COREPATH}/*.core.xz.p7"); then
        #coreEnabled
        #notify "STARTED" & #detach notification to start coreDumping immediately
        coreDumping
        truncate
    else
        echo "OWNPID=$$ core file exists" >> $DEBUGLOG
    fi;
    #notify "COMPLETED"
    #rm $lock_file
}
# entry point
main
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys
sys/           sysrq-trigger  sysvipc/       
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/core_ 
core_pattern     core_pipe_limit  core_uses_pid    
root@fspj-1b:/tmp/node_0x124a/opt/CCS >cat /proc/sys/kernel/core_pattern 
|/opt/CCS/coreDispatcher.sh 124d %E %P %s %t %c %h 15 /var/tmp/1/B/dumps
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >
root@fspj-1b:/tmp/node_0x124a/opt/CCS >


 
