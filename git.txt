git config --global http.proxy 10.144.1.10:8080
git config http.proxy 10.144.1.10:8080
git config --unset http.proxy 取消代理
git clone https://github.com/cdhello/myNotes.git
git config user.name "cdhello"
git config user.email "cdh130128@126.com"
git config core.editor vi
git config --global core.editor "vim"

git status
git add .
 git rm 'New Text Document.txt'

git commit -m "xxx"

git push -u origin master


每次clone下来，要注意设置用户名和邮件，否则按系统默认的来。
git config user.name;git config user.email分别为查看用户名和邮件


git hub的页面上创建新的repository时，有下面的提示。
第一个提示应该是说在自己的电脑上用命令行的git创建新repository并关联github，并提交推送
…or create a new repository on the command line
echo "# myNotes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/cdhello/myNotes.git
git push -u origin master

第二个提示是把本地的已经有的关联github并推送
…or push an existing repository from the command line
git remote add origin https://github.com/cdhello/myNotes.git
git push -u origin master
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


git remote show origin 查看远端信息，有git 仓库的链接

git branch xxx以当前代码为base创建branch xxx
git checkout -b xxx 以当前代码为base创建branch 并checkout 到xxx

git push origin :branch_you_...删除远端的分支


git push origin   xxx:xxx 把xxx分支推到远端
git push origin HEAD  这个也可以推送，当前

合并连续的commit:
git reset --soft 到要合并的第一个commit前的一个commit，这时候head指向那个节点，而代码没变
重新git commit (不用add)
git push --force，强制推送，就合并了
git add 以后，使用git commit --amend 把改动合并到最近的一次commit，复用前一次的commit message (git commit --amend --reset-author)
 远端的branch删除以后，git branch -a 仍然可以看到，git remote prune origin可以删除这些无效的本地远端mapping
git rebase origin/xx.... 从xx rebase过来？

git cherry-pick commit_num
有冲突时，修改好以后，
git add .
git cherry-pick --continue

rebase、merge有冲突时，应该也是解决好以后git add .再git rebase/merge --continue

远端如果发生的改变与本地有冲突，可以git fetch，然后 git reset --hard到远端的那个commit









